####  一.微服务概述
**1.什么是微服务？**  
微服务的核心就是将传统的一站式应用，**根据业务分成一个一个的服务**，彻底的去耦合，每一个服务提供单一业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程概述，能够自行单独启动或销毁，**拥有自己独立的数据库**。  
微服务强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题、提供落地对应服务的一个服务应用。  

**2.微服务架构是什么？**  
微服务架构是一种架构模式，它提倡将**单一应用程序划分成一组小的服务**，服务之间互相协调，互相配合，为用户提供最终价值。**每一个服务运行在其独立的进程中**，服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP协作的RESTful API）,每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生成环境，类生产环境等。另外，应当尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建。  

**微服务和微服务架构之间的关系**  

微服务强调的是一个服务，而微服务架构强调的是多个微服务构成的一个架构，强调的是整体。


**3.微服务优缺点**  

优点：  
-  每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求  
-  开发简单、开发效率提高，一个服务可能就是专一的只干一件事。  
-  微服务能够被小团队单独开发，这个小团队是2到5人的开发人员组成。   
-  微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。  
-  微服务能使用不同的语言开发。  
-  易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins, Hudson, bamboo 。  
-  微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。  
-  微服务允许你利用融合最新技术。  
-  微服务只是业务逻辑的代码，不会和HTML,CSS 或其他界面组件混合。  
-  每个微服务都有自己的存储能力，可以有自己的数据库。也可以有统一数据库。  
 
 
缺点：  
-  开发人员要处理分布式系统的复杂性
-  多服务运维难度，随着服务的增加，运维的压力也在增大
-  系统部署依赖
-  服务间通信成本
-  数据一致性
-  系统集成测试
-  性能监控……

**4.当前各大IT公司用的微服务架构有哪些？**  
-  阿里Dubbo/HSF  
-  京东JSF  
-  新浪微博Motan  
-  当当网DubboX 
-  
**5.各微服务框架对比**  

![image.png](WEBRESOURCEc7b0fbc80f6c8fd1c0a2ae1911b6d8bb)   

**6.微服务之间是如何独立通讯的**  

**7.springCloud和Dubbo有哪些区别？**   

springCloud活跃度比Dubbo高  
Dubbo是基于RPC远程调用，SpringCloud通信是基于Http的RESTful API调用，目标是微服务架构下的一站式解决方案。  



**8.springBoot和springCloud,请你谈谈对他们的理解**  

**9.什么是服务熔断？什么是服务降级**  

**10.微服务的优缺点分别是什么？说下你再项目开发中碰到的坑**  

**11.微服务技术栈**  

微服务技术栈是多种技术的集合体   

12.Nginx,Ribbon,Feign之间的区别



####  二.SpringCloud入门概述  

1.[SpringCloud官网](http://projects.spring.io/spring-cloud/)   
`http://projects.spring.io/spring-cloud/`  
2.[Spring Cloud Netflix中文文档](https://springcloud.cc/spring-cloud-netflix.html)   
`https://springcloud.cc/spring-cloud-netflix.html`  
3.[SpringCloud API文档](https://springcloud.cc/spring-cloud-dalston.html)  
`https://springcloud.cc/spring-cloud-dalston.html`  
4.[SpringCloud中国社区](http://springcloud.cn/)  
`http://springcloud.cn/`   
5.[SpringCloud 中文网](https://springcloud.cc/)  
`https://springcloud.cc/`

**1.SpringCloud是什么**  

SpringCloud，基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。
 
SpringCloud利用SpringBoot的开发便利性巧妙地简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等,它们都可以用SpringBoot的开发风格做到一键启动和部署。
 
SpringBoot并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。  

**2.SpringCloud和SpringBoot是什么关系**  

SpringBoot专注于快速方便的开发单个个体微服务。
 
SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，
为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务
 
SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系.
 
SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。  

**3.SpringCloud能干什么？** 
-  Distributed/versioned configuration(分布式/版本控制配置)  
-  Service registration and discovery(服务注册与发现)  
-  Routing(路由)  
-  Service-to-service calls(服务到服务的调用)  
-  Load balancing(负载均衡配置)  
-  Circuit Breakers(断路器)  
-  Distributed messaging(分布式消息管理)  

**对应于SpringCLoud分别:**  
-  服务的注册与发现（Eureka）
-  服务消费者（rest+Ribbon）
-  服务消费者（Feign）
-  断路器（Hystrix）
-  断路器监控(Hystrix Dashboard)
-  路由网关(Zuul)
-  分布式配置中心(Spring Cloud Config)
-  消息总线(Spring Cloud Bus)
-  服务链路追踪(Spring Cloud Sleuth)

**4.SpringCloud在国内使用情况**  

![image.png](WEBRESOURCEee1188079376a5c97f9360a1a95416a7)   

**5.作为服务注册中心，Eureka比Zookeeper好在哪里**

ACID  
Atomicity原子性  
Consistency一致性  
Isolcation独立性  
Durability持久性    

CAP  

Consistency强一致性  
Availability可用性  
Partition tolerance分区容错性  


著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性P在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。
因此
Zookeeper保证的是CP,
Eureka则是AP。
 
1). Zookeeper保证CP
当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。
 
2). Eureka保证AP
Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况     
1.Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务   
2.Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)   
3.当网络稳定时，当前实例新的注册信息会被同步到其它节点中  
 
因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。
 
 
 
 
 
 
 



